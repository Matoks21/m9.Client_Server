plugins {
    id 'application'
    id 'jacoco'
    id 'java'
    id 'org.barfuin.gradle.jacocolog' version '1.0.1'
}

jacoco {
    toolVersion = "0.8.11"
}


repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:31.1-jre'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.google.code.gson:gson:2.9.0'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
}
jar {
    manifest {
        attributes "Main-Class": "HttpStatusChecker"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


application {
    mainClass = 'HttpStatusChecker'
}


tasks.named('test') {
    useJUnitPlatform()
}


test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}



jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.7
            }
        }
    }
}